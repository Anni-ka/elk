<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.elk.core.service" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.eclipse.elk.core.service" id="layoutProviders" name="Layout Providers"/>
      </appinfo>
      <documentation>
         The Layout Providers extension point allows plug-ins to add new layout providers to be used with the Eclipse Layout Kernel. Layout providers are algorithms that automatically compute layout information for an instance of the &lt;code&gt;KGraph&lt;/code&gt; data structure.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="provider"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  org.eclipse.elk.core.layoutProviders
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  An optional identifier of the extension instance.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  An optional name of the extension instance.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="provider">
      <annotation>
         <documentation>
            Use this element to register a layout metadata provider for use in ELK.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Qualified name of a layout metadata provider class.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.elk.core.data.ILayoutMetaDataProvider"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         0.1.0
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         The following is an example for a layout provider extension:
&lt;pre&gt;
   &lt;extension
         point=&quot;org.eclipse.elk.core.layoutProviders&quot;&gt;
      &lt;layoutProvider
            class=&quot;org.eclipse.elk.klodd.hierarchical.HierarchicalDataflowLayoutProvider&quot;
            category=&quot;org.eclipse.elk&quot;
            id=&quot;org.eclipse.elk.klodd.hierarchical&quot;
            name=&quot;KLoDD Hierarchical&quot;
            type=&quot;org.eclipse.elk.type.layered&quot;&gt;
         &lt;supportedDiagram
               priority=&quot;10&quot;
               type=&quot;org.eclipse.elk.type.dataFlow&quot;&gt;
         &lt;/supportedDiagram&gt;
         &lt;knownOption
               option=&quot;org.eclipse.elk.sizeConstraint&quot;&gt;
         &lt;/knownOption&gt;
         &lt;knownOption
               option=&quot;org.eclipse.elk.direction&quot;&gt;
         &lt;/knownOption&gt;
         &lt;knownOption
               option=&quot;org.eclipse.elk.spacing&quot;&gt;
         &lt;/knownOption&gt;
         &lt;knownOption
               option=&quot;org.eclipse.elk.portConstraints&quot;&gt;
         &lt;/knownOption&gt;
      &lt;/layoutProvider&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         All data that is contributed to this extension point is gathered in the singleton class &lt;code&gt;org.eclipse.elk.core.LayoutDataService&lt;/code&gt;. This is the point where registered data can be read at runtime.
&lt;p&gt;
&lt;b&gt;NOTE:&lt;/b&gt; The extension point is read out by the &lt;code&gt;org.eclipse.elk.core.ui&lt;/code&gt; plug-in, &lt;em&gt;not&lt;/em&gt; by &lt;code&gt;org.eclipse.elk.core&lt;/code&gt;.
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         Registered layout providers are made available through the Eclipse Layout Kernel. The layout kernel organizes appropriate selection of layout providers for layout of a graphical diagram, and provides means to manually select layout providers for each part of the diagram.
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         Copyright 2008 by&lt;br&gt;
&amp;nbsp;+ Kiel University&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;+ Department of Computer Science&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ Real-Time and Embedded Systems Group&lt;br&gt;
This program and the accompanying materials are made available under the terms of the Eclipse Public License (EPL) which accompanies this distribution, and is available at &lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;.
      </documentation>
   </annotation>

</schema>
